# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_pytoch_model_development.ipynb.

# %% auto 0
__all__ = ['DoubleConv', 'Pooling']

# %% ../nbs/05_pytoch_model_development.ipynb 3
import torch
from fastcore.all import *
from fastcore.test import *
from torch import nn

# %% ../nbs/05_pytoch_model_development.ipynb 4
class DoubleConv(nn.Module):
    def __init__(
        self,
        in_channels,
        out_channels,
        dropout_rate=0.2):
        super().__init__()

        self.conv = nn.Sequential(
            nn.Conv2d(in_channels=3, out_channels=64, kernel_size=3, stride=1),
            nn.BatchNorm2d(out_channels),
            nn.ReLU(),
            nn.Dropout(dropout_rate),
            nn.Conv2d(out_channels, out_channels, kernel_size=3, stride=1),
            nn.BatchNorm2d(out_channels),
            nn.ReLU(),
            nn.Dropout(dropout_rate)
            )

        def forward(self, x):
            return self.conv(x)


# %% ../nbs/05_pytoch_model_development.ipynb 5
class Pooling(nn.Module):
    def __init__(self, max_pool_only=False):
        super().__init__()
        self.max_pool = nn.MaxPool2d(kernel_size=2, stride=2)
        self.avg_pool = nn.AvgPool2d(kernel_size=2, stride=2)

    def forward(self, x):
        if self.max_pool_only:
            return self.max_pool(x)
        return torch.cat((self.max_pool(x), self.avg_pool(x)), dim=1)
