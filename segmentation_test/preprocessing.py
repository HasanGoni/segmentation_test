# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['IMAGE_HEIGHT', 'IMAGE_WIDTH', 'EPOCS', 'BATCH_SIZE', 'BUFFER_SIZE', 'class_names', 'train_count', 'test_count',
           'num_classes', 'steps_per_epoch', 'validation_steps', 'Preprocess', 'foo']

# %% ../nbs/00_core.ipynb 3
import tensorflow as tf
from tensorflow.keras.optimizers import Adam
from sklearn.model_selection import train_test_split
from pathlib import Path
from functools import partial
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import os
from fastcore.basics import patch
from fastcore.all import *
#from fastai.vision.all import *
from dataclasses import dataclass, field

from typing import Union, List, Tuple, Optional, Callable, Dict, Any

# %% ../nbs/00_core.ipynb 5
IMAGE_HEIGHT = 224
IMAGE_WIDTH = 224
EPOCS = 5
BATCH_SIZE = 8
BUFFER_SIZE = 30
class_names = ['Pin']
train_count = 107
test_count = 27
num_classes = len(class_names)
steps_per_epoch = train_count // BATCH_SIZE
validation_steps = test_count // BATCH_SIZE


# %% ../nbs/00_core.ipynb 8
@dataclass
class Preprocess:
    image_path:Union[Path, str]
    label_path:Union[Path, str]
    im_height:int = IMAGE_HEIGHT
    im_width:int = IMAGE_WIDTH
    bf_size:int = BUFFER_SIZE
    bs:int = BATCH_SIZE
    one_channel:bool=False
    test_size:float = 0.2
    img_ext:str = field(default_factory=str, init=False, repr=True)

    def __post_init__(self):
        self.img_ext = Path(self.image_path).ls()[0].suffix
        pat = f'*{self.img_ext}'
        self.images = [str(i) for i in Path(self.image_path).rglob(pat)]
        self.labels = [str(i) for i in Path(self.label_path).rglob(pat)]
        self.train_images, self.test_images, \
            self.train_labels, self.test_labels = train_test_split(
                         self.images,
                         self.labels, 
                         test_size=self.test_size,
                         random_state=42)


# %% ../nbs/00_core.ipynb 10
@patch_to(Preprocess)
def from_file_to_image(
                       self,
                       im_file:str,
                       one_channel:bool=True
                       ):
    image = tf.io.read_file(im_file)
    image = tf.image.decode_jpeg(image)
    #print(image.shape)
    image = tf.image.resize(
                            image, 
                            (self.im_height, self.im_width, ))
    if one_channel:
        return image
    else:
        return tf.image.grayscale_to_rgb(image)


# %% ../nbs/00_core.ipynb 12
@patch_to(Preprocess)
def show_image(self,im_file):
    #image = self.from_file_to_image(im_file)
    plt.imshow(im_file)
    plt.axis('off')
    plt.show()

# %% ../nbs/00_core.ipynb 14
@ patch_to(Preprocess)
def normalize(self, image, min=0):
    def _normalize(im):
        img = tf.cast(im, tf.float32)
        return img / 255.0

    if min == 0:
        return _normalize(image)
    else:
        return (_normalize(image) * 2.0) -1.0

# %% ../nbs/00_core.ipynb 16
@ patch_to(Preprocess)
def process_image_file(
                       self,
                       im_file:str,
                       norm:bool=True,
                       one_channel=False
                       ):
    image = self.from_file_to_image(im_file, one_channel=one_channel)
    if norm:
        image = self.normalize(image)
    if one_channel:
        image = tf.reshape(image, (self.im_height, self.im_width, 1,))
    else:
        image = tf.reshape(image, (self.im_height, self.im_width, 3,))
    return image

# %% ../nbs/00_core.ipynb 18
@ patch_to(Preprocess)
def process_image_and_label(
                       self,
                       im_file:str,
                       lbl_file:str,
                       norm:bool=True
                       ):
    return self.process_image_file(im_file, norm=norm, one_channel=self.one_channel), self.process_image_file(lbl_file, norm=norm, one_channel=self.one_channel) 

# %% ../nbs/00_core.ipynb 21
@patch_to(Preprocess)
def create_dataset(
                  self,
                  images, labels,
                  train:bool=True
                  ):
    _dataset = tf.data.Dataset.from_tensor_slices((images, labels))
    _dataset = _dataset.map(
                            self.process_image_and_label, 
                            num_parallel_calls=tf.data.AUTOTUNE
                            )
    if train:
        return  _dataset\
               .cache()\
               .shuffle(
                        self.bf_size,
                        reshuffle_each_iteration=True)\
               .batch(self.bs)\
               .repeat()\
               .prefetch(buffer_size=tf.data.AUTOTUNE)
    else:
        return  _dataset.batch(self.bs).repeat()


# %% ../nbs/00_core.ipynb 23
@patch_to(Preprocess)
def create_train_test_dataset(self):
    self.train_dataset = self.create_dataset(
                                            images=self.train_images, 
                                            labels=self.train_labels,
                                            train=True)
    self.test_dataset = self.create_dataset(
                                           self.test_images,
                                           self.test_labels,
                                           train=False)
    return self.train_dataset, self.test_dataset

# %% ../nbs/00_core.ipynb 27
def foo(): pass
