# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/19_model_embedding.semantic_deduplication.ipynb.

# %% auto 0
__all__ = ['ImageFeatureDataset', 'extract_features']

# %% ../../nbs/19_model_embedding.semantic_deduplication.ipynb 3
from cv_tools.core import *
from cv_tools.imports import *


# %% ../../nbs/19_model_embedding.semantic_deduplication.ipynb 4
import torch
import torch.nn as nn
from torch.utils.data import Dataset, DataLoader
from typing import List
from PIL import Image
import torchvision.transforms as transforms


# %% ../../nbs/19_model_embedding.semantic_deduplication.ipynb 8
class ImageFeatureDataset(Dataset):
    def __init__(self, image_paths: List[str], transform=None):
        self.image_paths = image_paths
        self.transform = transform or transforms.Compose([
            transforms.Resize((1152, 1632)),
            transforms.ToTensor(),
            #transforms.Normalize(mean=[0.485], std=[0.229])
        ])

    def __len__(self):
        return len(self.image_paths)

    def __getitem__(self, idx):
        img_path = self.image_paths[idx]
        image = Image.open(img_path).convert('L')  # Convert to grayscale
        image = Image.fromarray(image)
        image = image/255.0
        if self.transform:
            image = self.transform(image)
        return image, img_path

# %% ../../nbs/19_model_embedding.semantic_deduplication.ipynb 11
def extract_features(
    model: nn.Module,
    dataloader: DataLoader,
    device: torch.device,
    feature_dim: int = 256
) -> Tuple[np.ndarray, List[str]]:
    """Extract features from images using the encoder."""
    features = np.zeros((len(dataloader.dataset), feature_dim), dtype=np.float32)
    paths = []
    
    model.eval()
    with torch.no_grad():
        for idx, (batch, batch_paths) in enumerate(tqdm(dataloader, desc="Extracting features")):
            batch = batch.to(device)
            batch_features = model(batch).cpu().numpy()
            
            start_idx = idx * dataloader.batch_size
            end_idx = start_idx + len(batch)
            features[start_idx:end_idx] = batch_features
            paths.extend(batch_paths)
    
    return features, paths
