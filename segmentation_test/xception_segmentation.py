"""This is a simple example of training segmentation model using timm in Pytorch"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/12_xception_segmentation.ipynb.

# %% auto 0
__all__ = ['XceptionBinarySegmentation']

# %% ../nbs/12_xception_segmentation.ipynb 3
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms
import timm
from PIL import Image
import numpy as np
import albumentations as A
from albumentations.pytorch import ToTensorV2

# %% ../nbs/12_xception_segmentation.ipynb 4
from cv_tools.imports import *

# %% ../nbs/12_xception_segmentation.ipynb 5
class XceptionBinarySegmentation(nn.Module):
    def __init__(self):
        super(XceptionBinarySegmentation, self).__init__()
        # Create Xception model from scratch with single-channel input
        self.xception = timm.create_model(
            'xception', 
            pretrained=False, 
            in_chans=1, 
            features_only=True)
        
        self.decoder = nn.Sequential(
            nn.Conv2d(2048, 256, kernel_size=3, padding=1),
            nn.BatchNorm2d(256),
            nn.ReLU(inplace=True),
            nn.Conv2d(256, 1, kernel_size=1)
        )
        
        self.upsample = nn.Upsample(size=(1152, 1632), mode='bilinear', align_corners=True)

    def forward(self, x):
        features = self.xception(x)
        x = self.decoder(features[-1])
        x = self.upsample(x)
        return x
